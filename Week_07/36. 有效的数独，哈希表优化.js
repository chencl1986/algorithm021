/*
 * @lc app=leetcode.cn id=36 lang=javascript
 *
 * [36] 有效的数独
 *
 * https://leetcode-cn.com/problems/valid-sudoku/description/
 *
 * algorithms
 * Medium (61.85%)
 * Likes:    461
 * Dislikes: 0
 * Total Accepted:    113.6K
 * Total Submissions: 183.6K
 * Testcase Example:  '[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]'
 *
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 *
 *
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 *
 *
 *
 *
 * 上图是一个部分填充的有效的数独。
 *
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 * 示例 1:
 *
 * 输入:
 * [
 * ⁠ ["5","3",".",".","7",".",".",".","."],
 * ⁠ ["6",".",".","1","9","5",".",".","."],
 * ⁠ [".","9","8",".",".",".",".","6","."],
 * ⁠ ["8",".",".",".","6",".",".",".","3"],
 * ⁠ ["4",".",".","8",".","3",".",".","1"],
 * ⁠ ["7",".",".",".","2",".",".",".","6"],
 * ⁠ [".","6",".",".",".",".","2","8","."],
 * ⁠ [".",".",".","4","1","9",".",".","5"],
 * ⁠ [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: true
 *
 *
 * 示例 2:
 *
 * 输入:
 * [
 * ["8","3",".",".","7",".",".",".","."],
 * ["6",".",".","1","9","5",".",".","."],
 * [".","9","8",".",".",".",".","6","."],
 * ["8",".",".",".","6",".",".",".","3"],
 * ["4",".",".","8",".","3",".",".","1"],
 * ["7",".",".",".","2",".",".",".","6"],
 * [".","6",".",".",".",".","2","8","."],
 * [".",".",".","4","1","9",".",".","5"],
 * [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 * ⁠    但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 *
 * 说明:
 *
 *
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 *
 *
 */

// @lc code=start
/**
 * @param {character[][]} board
 * @return {boolean}
 */
var isValidSudoku = function (board) {
  /* 
行、列，以及小格内，数字是否出现重复的判断是独立的。
并且整个矩阵有9行、9列、9个小格。
因此我们只要用双循环遍历这个矩阵，并且保证第二层循环每进行一次，都遍历了一行、一列和一个小格即可。
*/
  // 遍历每一行、列、小格
  for (let i = 0; i < 9; i++) {
    // 每次循环都创建3个Set，分别存储行、列和小格的数字出现情况，只要分别判断其中是否有重复即可
    const sets = [new Set(), new Set(), new Set()];

    // 遍历行、列、小格中的每个位置
    for (let j = 0; j < 9; j++) {
      const nums = [
        board[i][j], // 行的每个值
        board[j][i], // 列的每个值
        // 小格的每个值
        board[
          // 小格的行索引
          3 * Math.floor(i / 3) + Math.floor(j / 3)
        ][
          // 小格的列索引
          3 * (i % 3) + (j % 3)
        ],
      ];

      // 判断每个值是否在对应Set中存在
      for (let k = 0; k < sets.length; k++) {
        // 当前值是数字，才需要判断
        if (nums[k] !== '.') {
          // 当前值如果在Set中，说明是无效的数独
          if (sets[k].has(nums[k])) {
            return false;
          }
          // 将当前值加入Set，用于下次判断
          sets[k].add(nums[k]);
        }
      }
    }
  }

  // 能够正常退出循环，表示数字都没有重复出现，是有效的数独
  return true;
};
// @lc code=end
