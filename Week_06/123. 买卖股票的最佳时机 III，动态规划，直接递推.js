/*
 * @lc app=leetcode.cn id=123 lang=javascript
 *
 * [123] 买卖股票的最佳时机 III
 *
 * https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/description/
 *
 * algorithms
 * Hard (47.66%)
 * Likes:    593
 * Dislikes: 0
 * Total Accepted:    72.5K
 * Total Submissions: 152.1K
 * Testcase Example:  '[3,3,5,0,0,3,1,4]'
 *
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
 *
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
 *
 * 注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 *
 * 示例 1:
 *
 * 输入: [3,3,5,0,0,3,1,4]
 * 输出: 6
 * 解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
 * 随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
 *
 * 示例 2:
 *
 * 输入: [1,2,3,4,5]
 * 输出: 4
 * 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4
 * 。
 * 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
 * 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 *
 *
 * 示例 3:
 *
 * 输入: [7,6,4,3,1]
 * 输出: 0
 * 解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。
 *
 */

// @lc code=start
/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function (prices) {
  // 如果没有价格信息，利润为0
  if (!prices && !prices.length) {
    return 0;
  }

  // 最多进行2次交易，交易有买入和卖出两种状态，因此递推2*2种情况
  // 偶数位置是买入状态，奇数位置是卖出状态
  // 实际上第一次交易时，买入为-prices[0]，卖出为0（因为还没有买过，就无法卖出）
  // 将递推状态都初始化为-prices[0]，从prices[0]开始递推，就会自然创建出第一次交易的状态
  let dp = new Array(4).fill(-prices[0]);

  // 按每天的价格进行递推
  for (let i = 0; i < prices.length; i++) {
    // 递推每次交易的价格
    for (let j = 0; j < dp.length; j++) {
      // 当前价格是根据上一次交易的结果推出
      dp[j] = Math.max(
        dp[j], // 如果这次交易没有收益，不进行交易，保持原样
        // 在j-1，即上一次交易的基础上，进行当次交易
        // j为0时，表示第一次交易，它的前一次无交易，为0
        (dp[j - 1] || 0) +
          // 偶数位置是买入状态，奇数位置是卖出状态，进行相应交易
          (j & 1 ? prices[i] : -prices[i]),
      );
    }
    // 也可以完全按照上一次递推的状态，推导下一次的状态，两者结果相同
    /* dp = dp.map((val, j) => {
      return Math.max(
        dp[j],
        (dp[j - 1] || 0) + (j & 1 ? prices[i] : -prices[i]),
      );
    }); */
  }

  // 卖出次数最多，就会拿到最多利润
  return dp[dp.length - 1];
};
// @lc code=end
