/*
 * @lc app=leetcode.cn id=122 lang=javascript
 *
 * [122] 买卖股票的最佳时机 II
 *
 * https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/description/
 *
 * algorithms
 * Easy (63.60%)
 * Likes:    896
 * Dislikes: 0
 * Total Accepted:    233.7K
 * Total Submissions: 366.8K
 * Testcase Example:  '[7,1,5,3,6,4]'
 *
 * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
 *
 * 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
 *
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 *
 *
 *
 * 示例 1:
 *
 * 输入: [7,1,5,3,6,4]
 * 输出: 7
 * 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
 * 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
 *
 *
 * 示例 2:
 *
 * 输入: [1,2,3,4,5]
 * 输出: 4
 * 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4
 * 。
 * 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
 * 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 *
 *
 * 示例 3:
 *
 * 输入: [7,6,4,3,1]
 * 输出: 0
 * 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
 *
 *
 *
 * 提示：
 *
 *
 * 1 <= prices.length <= 3 * 10 ^ 4
 * 0 <= prices[i] <= 10 ^ 4
 *
 *
 */

// @lc code=start
/**
 * @param {number[]} prices
 * @return {number}
 */
var maxProfit = function (prices) {
  dp = [
    0, // 此处保存的是当前完成卖出交易后，赚到的利润最大值，开始时没有交易，因此为0
    -prices[0], // 此处保存的是当前完成买入交易后，赚到的利润最大值，开始时买入股票，因此为负
  ];

  for (let i = 1; i < prices.length; i++) {
    dp = [
      // 计算当前卖出后的最大利润
      Math.max(
        dp[0], // 如果上一次已卖出，这次没有股票可卖
        dp[1] + prices[i], // 如果上次有买入，那么这次就按当前价格卖出，获得收益
      ),
      // 计算当前买入后的最大利润
      Math.max(
        dp[1], // 上次已经买过，这次没必要再买，否则会损失收益
        dp[0] - prices[i], // 如果上次卖出过，这次就买入，等待下次卖出机会
      ),
    ];
  }

  // 最后一次操作后，取最终利润的最大值
  return Math.max(...dp);
};
// @lc code=end
